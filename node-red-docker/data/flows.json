[
    {
        "id": "e91c87e660f5aff7",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4dd8b5c636be2521",
        "type": "global-config",
        "name": "global-config",
        "env": [
            {
                "name": "x1",
                "value": "0",
                "type": "num"
            },
            {
                "name": "x2",
                "value": "0",
                "type": "num"
            },
            {
                "name": "y1",
                "value": "0",
                "type": "num"
            },
            {
                "name": "y2",
                "value": "0",
                "type": "num"
            },
            {
                "name": "hand",
                "value": "0",
                "type": "num"
            }
        ]
    },
    {
        "id": "786747a6b76656bd",
        "type": "mqtt-broker",
        "name": "Data_Node_input",
        "broker": "broker.emqx.io",
        "port": 1883,
        "clientid": "Node_Red Joystick input",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "me_arm/tesi/debug",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "Connesso a MQTT broker, client id: Node_Red Joystick input",
        "birthMsg": {},
        "closeTopic": "me_arm/tesi/debug",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "Fine trasmissione, disconnessione, client id: Node_Red Joystick input",
        "closeMsg": {},
        "willTopic": "me_arm/tesi/debug",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "Connessione interrotta inaspettatamente, chiiusura comunicazione, client id: Node_Red Joystick input",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c7fa19f7a3463071",
        "type": "mqtt-broker",
        "name": "Data_Node_Output",
        "broker": "broker.emqx.io",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "me_arm/tesi/debug",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "Connesso a MQTT broker, client id: Node_Red_Output",
        "birthMsg": {},
        "closeTopic": "me_arm/tesi/debug",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "Fine trasmissione, disconnessione, client id: Node_Red_Output",
        "closeMsg": {},
        "willTopic": "me_arm/tesi/debug",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "Connessione interrotta inaspettatamente, chiusura connessione, client id: Node_Red_Output",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "022ce618b114d408",
        "type": "mqtt-broker",
        "name": "Data Speech input",
        "broker": "broker.emqx.io",
        "port": 1883,
        "clientid": "node_red speech-to-text input",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "me_arm/tesi/debug ",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "Connesso a MQTT broker, client id: Node_Red Speech-to-Text input",
        "birthMsg": {},
        "closeTopic": "me_arm/tesi/debug ",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "Fine trasmissione, disconnessione, client id: Node_Red Speech-to-Text input",
        "closeMsg": {},
        "willTopic": "me_arm/tesi/debug ",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "Connessione interrotta inaspettatamente, chiiusura comunicazione, client id: Node_Red Speech-to-Text input",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b33cc6d000661c2e",
        "type": "mqtt in",
        "z": "e91c87e660f5aff7",
        "name": "",
        "topic": "me_arm/tesi/raw_controls",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "786747a6b76656bd",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 380,
        "wires": [
            [
                "de0e27929131c771"
            ]
        ]
    },
    {
        "id": "392318b334b63613",
        "type": "mqtt out",
        "z": "e91c87e660f5aff7",
        "name": "",
        "topic": "me_arm/tesi/ready_controls",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c7fa19f7a3463071",
        "x": 1280,
        "y": 320,
        "wires": []
    },
    {
        "id": "8ba12fcd8c06443b",
        "type": "function",
        "z": "e91c87e660f5aff7",
        "name": "Filtro valori Joystick",
        "func": "// Limita valori inviabili a braccio\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n\n// Chiusura e apertura gripper\nif (msg.payload.hasOwnProperty(\"hand\")) {\n    var hand_tmp = global.get(\"hand\") || 0;\n\n    if (msg.payload.hand === \"open\") {\n        hand_tmp -= 0.2;\n    } else {\n        hand_tmp += 0.2;\n    }\n\n    hand_tmp = clamp(hand_tmp, -1, 1);\n    global.set(\"hand\", hand_tmp);\n\n    return msg;\n}\n\n// Lettura valori joystick\nvar x1_val = - msg.payload.joystick1.x;\nvar x2_val = msg.payload.joystick2.x;\nvar y1_val = msg.payload.joystick1.y;\nvar y2_val = msg.payload.joystick2.y;\n\n// Elimina i valori sotto death angle e chiama funzione di limite\nfunction adjustAndClamp(val, key) {\n    let current = global.get(key) || 0;\n\n    if (val > -10 && val < 10) {\n        return clamp(current, -1, 1);\n    } else {\n        return clamp(current + (val / 180), -1, 1);\n    }\n}\n\n// Gestione dei valori per ogni asse \nlet x1_tmp = adjustAndClamp(x1_val, \"x1\");\nlet x2_tmp = adjustAndClamp(x2_val, \"x2\");\nlet y1_tmp = adjustAndClamp(y1_val, \"y1\");\nlet y2_tmp = adjustAndClamp(y2_val, \"y2\");\n\n// Setta variabili globali \nglobal.set(\"x1\", x1_tmp);\nglobal.set(\"x2\", x2_tmp);\nglobal.set(\"y1\", y1_tmp);\nglobal.set(\"y2\", y2_tmp);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 520,
        "wires": [
            [
                "63a7ac2132df3b66",
                "dda7a45f8997ca32"
            ]
        ]
    },
    {
        "id": "dda7a45f8997ca32",
        "type": "function",
        "z": "e91c87e660f5aff7",
        "name": "Preparazione messagio JSON ",
        "func": "var string = {\n    base:     global.get(\"x1\"),\n    gripper:  global.get(\"hand\"),\n    elbow:    global.get(\"y1\"),\n    shoulder: global.get(\"y2\"),\n    speed: \"N/D\"  \n};\n\nmsg.payload = JSON.stringify(string);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 320,
        "wires": [
            [
                "392318b334b63613",
                "ba3743b2bed97cd8"
            ]
        ]
    },
    {
        "id": "63a7ac2132df3b66",
        "type": "debug",
        "z": "e91c87e660f5aff7",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 660,
        "wires": []
    },
    {
        "id": "ba3743b2bed97cd8",
        "type": "debug",
        "z": "e91c87e660f5aff7",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 660,
        "wires": []
    },
    {
        "id": "1dd64ad0e55fbf98",
        "type": "mqtt in",
        "z": "e91c87e660f5aff7",
        "name": "",
        "topic": "me_arm/tesi/voice_controls",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "022ce618b114d408",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "b8594f90ff207f06"
            ]
        ]
    },
    {
        "id": "b8594f90ff207f06",
        "type": "function",
        "z": "e91c87e660f5aff7",
        "name": "Gestione valori speech-to-text",
        "func": "let word = msg.payload.voice.toLowerCase(); \n\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n\nfunction set(key, val) {\n    let current = global.get(key) || 0;\n    \n    let updated = clamp(current + (0.2 * val) , -1, 1);\n    global.set(key, updated); \n}\n\nswitch (word) {\n    case \"avanti\":\n        set(\"y1\", 1);\n        break\n\n    case \"indietro\":\n        set(\"y1\", -1)\n        break;\n\n    case \"sinistra\":\n        set(\"x1\", -1)\n        break;\n\n    case \"destra\":\n        set(\"x1\", 1)\n        break;\n\n    case \"apri\":\n        set(\"hand\", 1)\n        break;\n\n    case \"chiudi\":\n        set(\"hand\", -1)\n        break;\n\n    case \"alto\":\n        set(\"y2\", 1)\n        break;\n\n    case \"basso\":\n        set(\"y2\", -1)\n        break;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 180,
        "wires": [
            [
                "dda7a45f8997ca32",
                "2ce52acd625f9b7a"
            ]
        ]
    },
    {
        "id": "2ce52acd625f9b7a",
        "type": "debug",
        "z": "e91c87e660f5aff7",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 20,
        "wires": []
    },
    {
        "id": "de0e27929131c771",
        "type": "function",
        "z": "e91c87e660f5aff7",
        "name": "Divisione movimento",
        "func": "let steps = 4;        // Divisione in 4 movimenti (modificabile)\nlet interval = 250;   // Divisione del tempo per permettere 4 movimenti\n\nlet outputs = [];\n\nif (msg.payload.hasOwnProperty(\"hand\")) {\n    msg.delay = 0;\n    return msg;\n}\n\nfor (let i = 0; i < steps; i++) {\n    let msgClone = RED.util.cloneMessage(msg);\n\n    // Divido il movimento in parti uguali\n    msgClone.payload.joystick1 = {\n        x: msg.payload.joystick1.x / steps,\n        y: msg.payload.joystick1.y / steps\n    };\n    msgClone.payload.joystick2 = {\n        x: msg.payload.joystick2.x / steps,\n        y: msg.payload.joystick2.y / steps\n    };\n\n    // Aggiungo delay ad uso del corrispettivo nodo\n    msgClone.delay = i * interval;\n\n    outputs.push(msgClone);\n}\n\nreturn [outputs];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 520,
        "wires": [
            [
                "b088b4d597ab5d0c"
            ]
        ]
    },
    {
        "id": "b088b4d597ab5d0c",
        "type": "delay",
        "z": "e91c87e660f5aff7",
        "name": "",
        "pauseType": "delayv",
        "timeout": "0.25",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 480,
        "y": 520,
        "wires": [
            [
                "8ba12fcd8c06443b"
            ]
        ]
    }
]